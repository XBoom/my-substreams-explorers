specVersion: v0.1.0
package:
  name: "ethereum_explorer"
  image: ./ethereum.png
  url: "http://github.com/streamingfast/substreams-explorers/"
  version: v0.1.2
  doc: |
    This packages holds simple modules to allow you to explore the Ethereum data model.  

imports:
  ethereum: ./ethereum-v1.0.0.spkg

network: mainnet

protobuf:
  files:
    - transaction.proto
    - event.proto
    - block_meta.proto
  importPaths:
    - ./proto

binaries:
  default:
    type: wasm/rust-v1
    file: ./target/wasm32-unknown-unknown/release/substreams.wasm

modules:
  - name: map_block_meta
    kind: map
    inputs:
      - source: sf.ethereum.type.v2.Block
    output:
      type: proto:eth.block_meta.v1.BlockMeta
    doc: |
      `map_block_meta` allows you to view a basic information about a block      

  - name: map_block_full
    kind: map
    inputs:
      - source: sf.ethereum.type.v2.Block
    output:
      type: proto:sf.ethereum.type.v2.Block
    doc: |
      `map_block_full` allows you to view a complete block, as received by a Substreams module      

  - name: map_filter_transactions
    kind: map
    inputs:
      - params: string
      - source: sf.ethereum.type.v2.Block
    output:
      type: proto:eth.transaction.v1.Transactions
    doc: |
      `map_filter_transaction` allows you to find a transaction by specifying either `to` or `from` value in the parameters. You might need to scope your search to the blocks you know you are going to find that transaction. Check with your preferred block explorer first.

  - name: map_contract_events
    kind: map
    inputs:
      - params: string
      - source: sf.ethereum.type.v2.Block
    output:
      type: proto:eth.event.v1.Events
    doc: |
      `map_contract_events` allows you to get instructions executed by a certain contract, and returns the raw Event data model.
      

params:
   # Filtering transactions with to = Uniswap V2 Router address
  map_filter_transactions: "to=0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"
  # Getting the logs of the Uniswap V2 Factory smart contract
  map_contract_events: "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f"